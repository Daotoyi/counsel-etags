* counsel-etags (v1.8.3)                                                        :noexport:

[[https://travis-ci.org/redguardtoo/counsel-etags][https://travis-ci.org/redguardtoo/counsel-etags.svg?branch=master]]
[[http://melpa.org/#/counsel-etags][file:http://melpa.org/packages/counsel-etags-badge.svg]] [[http://stable.melpa.org/#/counsel-etags][file:http://stable.melpa.org/packages/counsel-etags-badge.svg]]

Fast, energy-saving, and powerful code navigation solution.

It's been tested on Linux/Windows/macOS.

[[file:demo.png]]
* Table of Content                                                              :noexport:TOC:
- [[#install][Install]]
- [[#usage][Usage]]
- [[#tips-optional][Tips (OPTIONAL)]]
  - [[#options-file][Options file]]
  - [[#ignore-directories-and-files][Ignore directories and files]]
  - [[#dependency-on-emacs-apis-is-minimum][Dependency on Emacs APIs is minimum]]
  - [[#specify-multiple-tags-files][Specify multiple tags files]]
  - [[#auto-update-tags-file][Auto update tags file]]
  - [[#rust-programming-language][Rust programming language]]
  - [[#list-all-tags][List all tags]]
  - [[#two-step-tag-matching-using-regular-expression-and-filter][Two-step tag matching using regular expression and filter]]
  - [[#open-recent-tag][Open recent tag]]
  - [[#ctags-setup][Ctags setup]]
  - [[#search-with-negative-pattern][Search with negative pattern]]
  - [[#grep-program][Grep program]]
  - [[#windows][Windows]]
- [[#step-by-step-guide][Step by step guide]]
  - [[#step-1-a-toy-c-project][Step 1, a toy C project]]
  - [[#step-2-use-counsel-etags][Step 2, use =counsel-etags=]]
- [[#bug-report][Bug Report]]

* Install
You can install =counsel-etags= from [[https://melpa.org/#/counsel-etags][MELPA]] with =package.el= (=M-x package-install counsel-etags=).

If "Exuberant Ctags" (some people prefer "Universal Ctags" because it's more actively maintained) exists, this program works out of box.

"GNU Find" is used if it's installed but it's *optional*.

Or else, customize =counsel-etags-update-tags-backend= to create tags file with your own CLI.

Please note [[https://github.com/redguardtoo/emacs.d/issues/697#issuecomment-394141015][it's reported]] "Exuberant Ctags" v5.8.5 is buggy.
* Usage
Run =M-x counsel-etags-find-tag-at-point= to navigate in code files without any setup.

This command will:
- find project root folder and scan code *automatically*
- find correct tag *automatically*
- if no tag is find, it runs =ripgrep= or =grep= *automatically*

That's it.

Please note parsing tags file containing line with 2K characters could be slow. That's the known issue of Emacs Lisp. The program itself is perfectly fine.

If you prefer manually setup tags file. You only need run =M-x counsel-etags-scan-code= once or create tags file [[https://www.emacswiki.org/emacs/BuildTags][in your own way]].

Please read [[#step-by-step-guide][Step by step guide]] if you are still confused.
* Tips (OPTIONAL)
** Options file
Path of options file is defined in =counsel-etags-ctags-options-file=. Its default value is =~/.ctags=.

Exuberant Ctags actually can NOT open option file ".ctags" through cli option.

But path =~/.ctags= is OK because we use Emacs Lisp to load =~.ctags=.

Please use file name like =ctags.cnf= instead =.ctags= when customize this variable.

Universal Ctags does NOT have this bug.
** Ignore directories and files
You can setup =counsel-etags-ignore-directories= and =counsel-etags-ignore-filenames=,
#+begin_src elisp
(eval-after-load 'counsel-etags
  '(progn
     ;; counsel-etags-ignore-directories does NOT support wildcast
     (add-to-list 'counsel-etags-ignore-directories "build_clang")
     (add-to-list 'counsel-etags-ignore-directories "build_clang")
     ;; counsel-etags-ignore-filenames supports wildcast
     (add-to-list 'counsel-etags-ignore-filenames "TAGS")
     (add-to-list 'counsel-etags-ignore-filenames "*.json")))
#+end_src
** Dependency on Emacs APIs is minimum
Any tag related API or variable is not used.

Neither =tags-file-name= nor =tags-table-list= is used.

Any commands (=visit-tags-table=, =xref-find-references=, ...) mentioned by other online tutorials are not used.

I intend to keep this package is completely independent.
** Specify multiple tags files 
=counsel-etags-extra-tags-files= contains extra tags file to parse.

Set it like =(setq counsel-etags-extra-tags-files '("/usr/include/TAGS" "/usr/local/include/TAGS"))=

Tags files in =counsel-etags-extra-tags-files= should contain only tag with absolute path.

Here is a shell CLI to create tags file:
#+begin_src bash
find /usr/include | ctags -e -L -
#+end_src
** Auto update tags file
#+begin_src elisp
;; Don't ask before rereading the TAGS files if they have changed
(setq tags-revert-without-query t)
;; Don't warn when TAGS files are large
(setq large-file-warning-threshold nil)
;; Setup auto update now
(add-hook 'prog-mode-hook
  (lambda ()
    (add-hook 'after-save-hook
              'counsel-etags-virtual-update-tags 'append 'local)))
#+end_src
You can change callback =counsel-etags-update-tags-backend= to update tags file using your own solution,
#+begin_src elisp
(setq counsel-etags-update-tags-backend (lambda () (shell-command "find . -type f -iname \"*.[ch]\" | etags -")))
#+end_src
** Rust programming language
Tags file for [[https://www.rust-lang.org/][Rust programming language]] can be generated by [[https://github.com/dan-t/rusty-tags][rusty-tags]].

Run =rusty-tags emacs= in shell to generate tags file. You also need =(setq counsel-etags-tags-file-name "rusty-tags.emacs")=.

The easiest way to setup rusty-tags per project is to create [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][.dir-locals.el]] in project root,
#+begin_src elisp
((nil . ((counsel-etags-update-tags-backend . (lambda (src-dir) (shell-command "rusty-tags emacs")))
         (counsel-etags-tags-file-name . "rusty-tags.emacs"))))
#+end_src
** List all tags
=M-x counsel-etags-list-tag=
** Two-step tag matching using regular expression and filter
=M-x counsel-etags-find-tag=
** Open recent tag
=M-x counsel-etags-recent-tag=
** Ctags setup
Google "filetype:ctags site:github.com". Here is [[https://gist.github.com/redguardtoo/b12ddae3b8010a276e9b][mine]].

You may need configure environment variable "HOME" on Windows because Ctags looks for "%HOME%/.ctags" by default.
** Search with negative pattern
All counsel-etags commands supports negative pattern from [[https://github.com/abo-abo/swiper][ivy]].

You can filter the candidates with =keyword1 !keyword2 keyword3=. So we display only candidate containing =keyword1= but neither =keyword2= nor =keyword3=.

You can also press =C-c C-o= to create a buffer containing all candidates.

In summary, all functionality from powerful [[https://github.com/abo-abo/swiper][ivy]] are supported perfectly.
** Grep program
If [[https://github.com/BurntSushi/ripgrep][ripgrep]] is installed, it's used as faster grep program. Or else we fallback to =grep=.

Use =M-x counsel-etags-grep= to grep in project root.

Use =M-x counsel-etags-grep-current-directory= to grep current directory.

Use =C-u num M-x counsel-etags-grep-current-directory= to grep NUM level up of current directory. If NUM is nil or 0, current directory is grepped

** Windows
No extra setup is needed if you install Cygwin to its default location on any driver except make sure "Exuberant Ctags" has been installed through Cygwin. Or else, you could setup =counsel-etags-find-program=, =counsel-etags-tags-program=, and =counsel-etags-grep-program=.
* Step by step guide
You need use Linux/Cygwin/MSYS2. CLI in macOS should be similar.

** Step 1, a toy C project
#+begin_src bash
mkdir -p ~/proj1 && cd ~/proj1
cat > .dir-locals.el <<EOF
((nil . ((counsel-etags-project-root . "~/proj1/")
         (counsel-etags-extra-tags-files . ("./include/TAGS")))))
EOF
cat > hello.c <<EOF
include <stdio.h>

void fn() {
}

int main() {
    printf('hello world');
    fn();
    return 0;
}
EOF
mkdir -p include && cd include && find /usr/include | ctags -e -L -
#+end_src

** Step 2, use =counsel-etags=
Open =hello.c= in Emacs (say "YES" if Emacs ask any question), move focus over symbol "fn" or "printf", run =counsel-etags-find-tag-at-point=.
* Bug Report
Check [[https://github.com/redguardtoo/counsel-etags]].